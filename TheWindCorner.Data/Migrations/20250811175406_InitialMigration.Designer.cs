// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheWindCorner.Data;

#nullable disable

namespace TheWindCorner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250811175406_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Event Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("A description of the event");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time, when the event ends");

                    b.Property<string>("FullInfo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("A full description of the event");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The location, where the event is to be held");

                    b.Property<Guid?>("SpotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time, when the event starts");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("The status of the event");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("A short descriptive title for the event");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SpotId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Image Identifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The path to the image");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Text added to the image");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("A short descriptive title for the image");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Item Identifier");

                    b.Property<string>("Brand")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("The Brand Name of the Item");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasComment("The Category of the Item");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time, when the item was listed for sale");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("A full description of the item");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("If the Item has been approved for listing");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("If the Item has been deleted");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit")
                        .HasComment("If the Item has been sold");

                    b.Property<int>("ItemType")
                        .HasColumnType("int")
                        .HasComment("The Type of the Item");

                    b.Property<string>("Model")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("The Model Name of the Item");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Identifier of the Item's Owner");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Price of the Item");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Size of the Item");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("A short descriptive title for the item");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("The Year of the Item's production or collection");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Items", t =>
                        {
                            t.HasComment("Item listed for sale");
                        });
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.ItemComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the comment made");

                    b.Property<DateTime>("CommentedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the comment was added or edited");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The full text of the comment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("If the comment has been deleted");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the item, that was commented");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, who made the comment");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ItemComments", t =>
                        {
                            t.HasComment("The comment on an item");
                        });
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the notification");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the notification was sent");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the item, that was commented");

                    b.Property<int>("EntityType")
                        .HasColumnType("int")
                        .HasComment("The type of the entity");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, whose action triggered the notification");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasComment("Notification to the admin about user's action");
                        });
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Spot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the spot");

                    b.Property<Guid>("AddedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, who added the spot");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time, when the spot was added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("A full description of the spot");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("If the spot has been approved for listing");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("If the spot has been deleted");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasComment("The latitude of the spot's location");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasComment("The longitude of the spot's location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the spot");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.ToTable("Spots", t =>
                        {
                            t.HasComment("A location, where one of the wind-sports can be practiced");
                        });
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.SpotComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the comment made");

                    b.Property<DateTime>("CommentedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the comment was added or edited");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The full text of the comment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("If the comment has been deleted");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, who made the comment");

                    b.Property<Guid>("SpotId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the spot, that was commented");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SpotId");

                    b.ToTable("SpotComments", t =>
                        {
                            t.HasComment("The comment on an spot");
                        });
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.WantedItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the wanted item");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time, when the sought item was listed");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("A full description of the wanted item");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user seeking the item");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("A short descriptive title for the wanted item");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("WantedItems", t =>
                        {
                            t.HasComment("Item that an user is looking for");
                        });
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.WantedItemComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the comment made");

                    b.Property<DateTime>("CommentedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the comment was added or edited");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The full text of the comment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("If the comment has been deleted");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the user, who made the comment");

                    b.Property<Guid>("WantedItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the item, that was commented");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("WantedItemId");

                    b.ToTable("WantedItemComments", t =>
                        {
                            t.HasComment("The comment on an wanted item");
                        });
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the user has been created");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the user has been deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The first name of the user");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("If the user has been deleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The last name of the user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the user has been modified");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("The phone number of the user");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("The username of the user");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Event", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("TheWindCorner.Data.Models.Entities.Spot", "Spot")
                        .WithMany()
                        .HasForeignKey("SpotId");

                    b.Navigation("Image");

                    b.Navigation("Spot");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Item", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", "Owner")
                        .WithMany("ItemsForSale")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.ItemComment", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.Entities.Item", "Item")
                        .WithMany("Comments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Notification", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Spot", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", "AddedByUser")
                        .WithOne("HomeSpot")
                        .HasForeignKey("TheWindCorner.Data.Models.Entities.Spot", "AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWindCorner.Data.Models.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("AddedByUser");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.SpotComment", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWindCorner.Data.Models.Entities.Spot", "Spot")
                        .WithMany("Comments")
                        .HasForeignKey("SpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Spot");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.WantedItem", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", "Owner")
                        .WithMany("WantedItems")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.WantedItemComment", b =>
                {
                    b.HasOne("TheWindCorner.Data.Models.User.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheWindCorner.Data.Models.Entities.WantedItem", "WantedItem")
                        .WithMany("Comments")
                        .HasForeignKey("WantedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("WantedItem");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Item", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.Spot", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.Entities.WantedItem", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TheWindCorner.Data.Models.User.ApplicationUser", b =>
                {
                    b.Navigation("HomeSpot");

                    b.Navigation("ItemsForSale");

                    b.Navigation("WantedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
